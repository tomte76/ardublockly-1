// This file was automatically generated.  Do not modify.

'use strict';

goog.provide('Blockly.Msg.hu');

goog.require('Blockly.Msg');

Blockly.Msg.ADD_COMMENT = "Megjegyzés hozzáadása";
Blockly.Msg.AUTH = "Kérjük, engedélyezd az alkalmazásnak munkád elmentését és megosztását.";
Blockly.Msg.CHANGE_VALUE_TITLE = "Érték módosítása:";
Blockly.Msg.CHAT = "Ebben a mezőben tudsz a közreműködőkkel beszélgetni!";
Blockly.Msg.CLEAN_UP = "Blokkok kiürítése";
Blockly.Msg.COLLAPSE_ALL = "Blokkok összecsukása";
Blockly.Msg.COLLAPSE_BLOCK = "Blokk összecsukása";
Blockly.Msg.COLOUR_BLEND_COLOUR1 = "szín 1";
Blockly.Msg.COLOUR_BLEND_COLOUR2 = "szín 2";
Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";  // untranslated
Blockly.Msg.COLOUR_BLEND_RATIO = "arány";
Blockly.Msg.COLOUR_BLEND_TITLE = "színkeverés";
Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Két színt kever össze a megadott arányban (0.0 - 1.0).";
Blockly.Msg.COLOUR_PICKER_HELPURL = "https://hu.wikipedia.org/wiki/Szín";
Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Válassz színt a palettáról.";
Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";  // untranslated
Blockly.Msg.COLOUR_RANDOM_TITLE = "véletlen szín";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Véletlenszerűen kiválasztott szín.";
Blockly.Msg.COLOUR_RGB_BLUE = "kék";
Blockly.Msg.COLOUR_RGB_GREEN = "zöld";
Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";  // untranslated
Blockly.Msg.COLOUR_RGB_RED = "vörös";
Blockly.Msg.COLOUR_RGB_TITLE = "Szín";
Blockly.Msg.COLOUR_RGB_TOOLTIP = "Szín előállítása a megadott vörös, zöld, és kék értékekkel.  Minden értéknek 0 és 100 közé kell esnie.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";  // untranslated
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "befejezi az ismétlést";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "folytatja a következővel";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Megszakítja az utasítást tartalmazó ciklust.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Kihagyja a ciklus további részét, és elölről kezdi a következő elemmel.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Figyelem: Ez a blokk csak cikluson belül használható.";
Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://github.com/google/blockly/wiki/Loops#for-each";  // untranslated
Blockly.Msg.CONTROLS_FOREACH_TITLE = "minden %1 elemre a %2 listában";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "A '%1' változó minden lépésben megkapja a lista adott elemének értékét, és végrehajt vele néhány utasítást.";
Blockly.Msg.CONTROLS_FOR_HELPURL = "https://github.com/google/blockly/wiki/Loops#count-with";  // untranslated
Blockly.Msg.CONTROLS_FOR_TITLE = "számolj %1 értékével %2 és %3 között %4 lépésközzel";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "A(z) '%1' változó felveszi a kezdőérték és a végérték közötti értékeket a meghatározott lépésközzel. Eközben a meghatározott blokkokat hajtja végre.";
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Feltétel hozzáadása a ha blokkhoz.";
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Végső feltétel hozzáadása a ha blokkhoz.";
Blockly.Msg.CONTROLS_IF_HELPURL = "https://github.com/google/blockly/wiki/IfElse";  // untranslated
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "A ha blokk testreszabásához bővítsd, töröld vagy rendezd át a részeit.";
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "különben";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "különben ha";
Blockly.Msg.CONTROLS_IF_MSG_IF = "ha";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "Ha a kifejezés igaz, akkor végrehajtja az utasításokat.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "Ha a kifejezés igaz, akkor végrehajtja az első utasításblokkot. Különben a második utasításblokk kerül végrehajtásra.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "Ha az első kifejezés igaz, akkor végrehajtja az első utasításblokkot. Különben, ha a második kifejezés igaz, akkor végrehajtja a második utasítás blokkot.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "Ha az első kifejezés igaz, akkor végrehajtjuk az első utasítás blokkot.  Ha a második kifejezés igaz, akkor végrehajtjuk a második utasítás blokkot.  Amennyiben egyik kifejezés sem igaz, akkor az utolsó utasítás blokk kerül végrehajtásra.";
Blockly.Msg.CONTROLS_REPEAT_HELPURL = "https://hu.wikipedia.org/wiki/Ciklus_(programoz%C3%A1s)#Sz.C3.A1ml.C3.A1l.C3.B3s_.28FOR.29_ciklus";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "ismételd %1 alkalommal";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Megadott kódrészlet ismételt végrehajtása.";
Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://github.com/google/blockly/wiki/Loops#repeat";  // untranslated
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "ismételd amíg nem";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "ismételd amíg";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "Amíg a feltétel hamis, végrehajtja az utasításokat.";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "Amíg a feltétel igaz, végrehajtja az utasításokat.";
Blockly.Msg.DELETE_ALL_BLOCKS = "Az összes %1 blokk törlése?";
Blockly.Msg.DELETE_BLOCK = "Blokk törlése";
Blockly.Msg.DELETE_X_BLOCKS = "%1 blokk törlése";
Blockly.Msg.DISABLE_BLOCK = "Blokk letiltása";
Blockly.Msg.DUPLICATE_BLOCK = "Másolat";
Blockly.Msg.ENABLE_BLOCK = "Blokk engedélyezése";
Blockly.Msg.EXPAND_ALL = "Blokkok kibontása";
Blockly.Msg.EXPAND_BLOCK = "Blokk kibontása";
Blockly.Msg.EXTERNAL_INPUTS = "Külső kapcsolatok";
Blockly.Msg.HELP = "Súgó";
Blockly.Msg.INLINE_INPUTS = "Belső kapcsolatok";
Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-empty-list";  // untranslated
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "üres lista";
Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Elemeket nem tartalmazó üres listát ad eredményül";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "lista";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Add, remove, or reorder sections to reconfigure this list block.";
Blockly.Msg.LISTS_CREATE_WITH_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "Lista készítés, elemek:";
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Elem hozzáadása listához.";
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Listát készít a megadott elemekből.";
Blockly.Msg.LISTS_GET_INDEX_FIRST = "az első";
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "a végétől számított";
Blockly.Msg.LISTS_GET_INDEX_FROM_START = "az elejétől számított";
Blockly.Msg.LISTS_GET_INDEX_GET = "listából értéke";
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "listából kivétele";
Blockly.Msg.LISTS_GET_INDEX_LAST = "az utolsó";
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "bármely";
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "listából törlése";
Blockly.Msg.LISTS_GET_INDEX_TAIL = "elemnek";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "A lista első elemét adja eredményül.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_END = "A lista megadott sorszámú elemét adja eredményül.  1 az utolsó elemet jelenti.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_START = "A lista megadott sorszámú elemét adja eredményül.  1 az első elemet jelenti.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "A lista utolsó elemét adja eredményül.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "A lista véletlenszerűen választott elemét adja eredményül.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Az első elem kivétele a listából.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_END = "A megadott sorszámú elem kivétele a listából 1 az utolsó elemet jelenti.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_START = "A megadott sorszámú elem kivétele a listából 1 az első elemet jelenti.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Az utolsó elem kivétele a listából.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Véletlenszerűen választott elem kivétele a listából.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Az első elem törlése a listából.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_END = "A megadott sorszámú elem törlése a listából 1 az utolsó elemet jelenti.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_START = "A megadott sorszámú elem törlése a listából 1 az első elemet jelenti.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Az utolsó elem törlése a listából.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Véletlenszerűen választott elem törlése a listából.";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "és a végétől számított";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "és az elejétől számított";
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "és az utolsó";
Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "részlistája az első";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "részlistája a végétől számított";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "részlistája az elejétől számított";
Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "elem között";
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "A lista adott részéről másolat.";
Blockly.Msg.LISTS_INDEX_OF_FIRST = "listában első előfordulásaː";
Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";  // untranslated
Blockly.Msg.LISTS_INDEX_OF_LAST = "listában utolsó előfordulásaː";
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "A megadott elem első vagy utolsó előfordulásával tér vissza. 0-val tér vissza, ha nem talál ilyen elemet.";
Blockly.Msg.LISTS_INLIST = "A(z)";
Blockly.Msg.LISTS_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#is-empty";  // untranslated
Blockly.Msg.LISTS_ISEMPTY_TITLE = "%1 üres lista?";
Blockly.Msg.LISTS_ISEMPTY_TOOLTIP = "Az eredmény igaz, ha a lista nem tartalmaz elemeket.";
Blockly.Msg.LISTS_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Lists#length-of";  // untranslated
Blockly.Msg.LISTS_LENGTH_TITLE = "%1 lista hossza";
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "A lista elemszámát adja eredményül.";
Blockly.Msg.LISTS_REPEAT_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg.LISTS_REPEAT_TITLE = "Lista készítése %1 elemet %2 alkalommal hozzáadva";
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "A megadtott elem felhasználásával n elemű listát készít";
Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://github.com/google/blockly/wiki/Lists#in-list--set";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "elemkéntː";
Blockly.Msg.LISTS_SET_INDEX_INSERT = "listába szúrd be";
Blockly.Msg.LISTS_SET_INDEX_SET = "listába állítsd be";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Beszúrás a lista elejére.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_END = "Beszúrás a megadott sorszámú elem elé a listában.  1 az utolsó elemet jelenti.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_START = "Beszúrás a megadott sorszámú elem elé a listában.  1 az első elemet jelenti.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Beszúrás a lista végére.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Beszúrás véletlenszerűen választott elem elé a listában.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Az első elem cseréje a listában.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_END = "A megadott sorszámú elem cseréje a listában.  1 az utolsó elemet jelenti.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_START = "A megadott sorszámú elem cseréje a listában.  1 az első elemet jelenti.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Az utolsó elem cseréje a listában.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Véletlenszerűen választott elem cseréje a listában.";
Blockly.Msg.LISTS_SORT_HELPURL = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";  // untranslated
Blockly.Msg.LISTS_SORT_ORDER_ASCENDING = "ascending";  // untranslated
Blockly.Msg.LISTS_SORT_ORDER_DESCENDING = "descending";  // untranslated
Blockly.Msg.LISTS_SORT_TITLE = "sort %1 %2 %3";  // untranslated
Blockly.Msg.LISTS_SORT_TOOLTIP = "Sort a copy of a list.";  // untranslated
Blockly.Msg.LISTS_SORT_TYPE_IGNORECASE = "alphabetic, ignore case";  // untranslated
Blockly.Msg.LISTS_SORT_TYPE_NUMERIC = "numeric";  // untranslated
Blockly.Msg.LISTS_SORT_TYPE_TEXT = "alphabetic";  // untranslated
Blockly.Msg.LISTS_SPLIT_HELPURL = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";  // untranslated
Blockly.Msg.LISTS_SPLIT_LIST_FROM_TEXT = "lista készítése szövegből";
Blockly.Msg.LISTS_SPLIT_TEXT_FROM_LIST = "sztring készítése listából";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_JOIN = "A lista elemeit összefűzi szöveggé a határoló karaktereket is felhasználva.";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_SPLIT = "Listát készít a határoló karaktereknél törve a szöveget.";
Blockly.Msg.LISTS_SPLIT_WITH_DELIMITER = "határoló karakter";
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "hamis";
Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://github.com/google/blockly/wiki/Logic#values";  // untranslated
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Igaz, vagy hamis érték";
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "igaz";
Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://hu.wikipedia.org/wiki/Egyenl%C5%91tlens%C3%A9g";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Igaz, ha a kifejezés két oldala egyenlő.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Igaz, ha a bal oldali kifejezés nagyobb, mint a jobb oldali.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Igaz, ha a bal oldali kifejezés nagyobb vagy egyenlő, mint a jobb oldali.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Igaz, ha a bal oldali kifejezés kisebb, mint a jobb oldali.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Igaz, ha a bal oldali kifejezés kisebb vagy egyenlő, mint a jobb oldali.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Igaz, ha a kifejezés két oldala nem egyenlő..";
Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://github.com/google/blockly/wiki/Logic#not";  // untranslated
Blockly.Msg.LOGIC_NEGATE_TITLE = "nem %1";
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Igaz, ha a kifejezés hamis.  Hamis, ha a kifejezés igaz.";
Blockly.Msg.LOGIC_NULL = "null";
Blockly.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";  // untranslated
Blockly.Msg.LOGIC_NULL_TOOLTIP = "null érték.";
Blockly.Msg.LOGIC_OPERATION_AND = "és";
Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://github.com/google/blockly/wiki/Logic#logical-operations";  // untranslated
Blockly.Msg.LOGIC_OPERATION_OR = "vagy";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Igaz, ha mindkét kifejezés igaz.";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Igaz, ha legalább az egyik kifejezés igaz.";
Blockly.Msg.LOGIC_TERNARY_CONDITION = "vizsgáld meg:";
Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";  // untranslated
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "érték, ha hamis:";
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "érték, ha igaz:";
Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "Kiértékeli a megvizsgálandó kifejezést. Ha a kifejezés igaz, visszatér az \"érték, ha igaz\" értékkel, különben az \"érték, ha hamis\" értékkel.";
Blockly.Msg.MATH_ADDITION_SYMBOL = "+";  // untranslated
Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://hu.wikipedia.org/wiki/Matematikai_m%C5%B1velet";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Két szám összege.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Két szám hányadosa.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Két szám különbsége.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Két szám szorzata.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Az első számnak a második számmal megegyező hatványa.";
Blockly.Msg.MATH_CHANGE_HELPURL = "https://hu.wikipedia.org/wiki/JavaScript#Aritmetikai_oper.C3.A1torok";
Blockly.Msg.MATH_CHANGE_TITLE = "növeld %1 értékét %2 -vel";
Blockly.Msg.MATH_CHANGE_TOOLTIP = "A \"%1\" változó értékének növelése egy számmal.";
Blockly.Msg.MATH_CONSTANT_HELPURL = "https://hu.wikipedia.org/wiki/Matematikai_konstans";
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Ismert matematikai konstans: π (3.141…), e (2.718…), φ (1.618…), gyök(2) (1.414…), gyök(½) (0.707…), vagy ∞ (végtelen).";
Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";  // untranslated
Blockly.Msg.MATH_CONSTRAIN_TITLE = "korlátozd %1 -t %2 és %3 közé";
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Egy változó értékének korlátozása a megadott zárt intervallumra.";
Blockly.Msg.MATH_DIVISION_SYMBOL = "÷";  // untranslated
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "-nek osztója";
Blockly.Msg.MATH_IS_EVEN = "páros";
Blockly.Msg.MATH_IS_NEGATIVE = "negatív";
Blockly.Msg.MATH_IS_ODD = "páratlan";
Blockly.Msg.MATH_IS_POSITIVE = "pozitív";
Blockly.Msg.MATH_IS_PRIME = "prím";
Blockly.Msg.MATH_IS_TOOLTIP = "Ellenőrzi, hogy a szám páros, páratlan, prím, egész, pozitív vagy negatív-e, illetve osztható-e a másodikkal. Igaz, vagy hamis értéket ad eredményül.";
Blockly.Msg.MATH_IS_WHOLE = "egész";
Blockly.Msg.MATH_MODULO_HELPURL = "https://hu.wikipedia.org/wiki/Eg%C3%A9szr%C3%A9sz#Als.C3.B3_eg.C3.A9szr.C3.A9sz";
Blockly.Msg.MATH_MODULO_TITLE = "%1 ÷ %2 maradéka";
Blockly.Msg.MATH_MODULO_TOOLTIP = "Az egész osztás maradékát adja eredméynül.";
Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "×";  // untranslated
Blockly.Msg.MATH_NUMBER_HELPURL = "https://hu.wikipedia.org/wiki/Sz%C3%A1m";
Blockly.Msg.MATH_NUMBER_TOOLTIP = "Egy szám.";
Blockly.Msg.MATH_ONLIST_HELPURL = "";  // untranslated
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "lista elemeinek átlaga";
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "lista legnagyobb eleme";
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "lista mediánja";
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "lista legkisebb eleme";
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "lista módusza";
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "lista véletlen eleme";
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "lista elemeinek szórása";
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "lista elemeinek összege";
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "A lista elemeinek átlagát adja eredményül.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "A lista legnagyobb elemét adja vissza.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "A lista elemeinek mediánját adja eredményül.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "A lista legkisebb elemét adja vissza.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "A lista elemeinek móduszát adja eredményül.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "A lista egy véletlen elemét adja eredményül.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "A lista elemeinek szórását adja eredményül.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "A lista elemeinek összegét adja eredményül.";
Blockly.Msg.MATH_POWER_SYMBOL = "^";  // untranslated
Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://hu.wikipedia.org/wiki/V%C3%A9letlen";
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "véletlen tört";
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Véletlen tört érték 0.0 és 1.0 között.";
Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://hu.wikipedia.org/wiki/V%C3%A9letlen";
Blockly.Msg.MATH_RANDOM_INT_TITLE = "véletlen egész szám %1 között %2";
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Véletlen egész szám a megadott zárt intervallumon belül.";
Blockly.Msg.MATH_ROUND_HELPURL = "https://hu.wikipedia.org/wiki/Eg%C3%A9szr%C3%A9sz#Kerek.C3.ADt.C3.A9s";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "kerekítsd";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = "kerekítsd lefelé";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = "kerekítsd felfelé";
Blockly.Msg.MATH_ROUND_TOOLTIP = "Egy szám kerekítése felfelé vagy lefelé.";
Blockly.Msg.MATH_SINGLE_HELPURL = "https://hu.wikipedia.org/wiki/Gy%C3%B6kvon%C3%A1s";
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "abszolútérték";
Blockly.Msg.MATH_SINGLE_OP_ROOT = "négyzetgyök";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "A szám abszolútértéke.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Az e megadott számú hatványa.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = "A szám természetes alapú logaritmusa.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "A szám 10-es alapú logaritmusa.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "A szám -1 szerese.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = "A 10 megadott számú hatványa.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "A szám négyzetgyöke.";
Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";  // untranslated
Blockly.Msg.MATH_TRIG_ACOS = "acos";  // untranslated
Blockly.Msg.MATH_TRIG_ASIN = "asin";  // untranslated
Blockly.Msg.MATH_TRIG_ATAN = "atan";  // untranslated
Blockly.Msg.MATH_TRIG_COS = "cos";  // untranslated
Blockly.Msg.MATH_TRIG_HELPURL = "https://hu.wikipedia.org/wiki/Sz%C3%B6gf%C3%BCggv%C3%A9nyek";
Blockly.Msg.MATH_TRIG_SIN = "sin";  // untranslated
Blockly.Msg.MATH_TRIG_TAN = "tan";  // untranslated
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "A fokban megadott szög arkusz koszinusz értéke.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "A fokban megadott szög arkusz szinusz értéke.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "A fokban megadott szög arkusz tangens értéke.";
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "A fokban megadott szög koszinusz értéke.";
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "A fokban megadott szög szinusz értéke.";
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "A fokban megadott szög tangens értéke.";
Blockly.Msg.ME = "Én";
Blockly.Msg.NEW_VARIABLE = "Új változó...";
Blockly.Msg.NEW_VARIABLE_TITLE = "Az új változó neve:";
Blockly.Msg.ORDINAL_NUMBER_SUFFIX = ".";
Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "utasítások engedélyezése";
Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "paraméterlistaː";
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://hu.wikipedia.org/wiki/F%C3%BCggv%C3%A9ny_(programoz%C3%A1s)";
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Végrehajtja az eljárást.";
Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://hu.wikipedia.org/wiki/F%C3%BCggv%C3%A9ny_(programoz%C3%A1s)";
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Meghívja a függvényt.";
Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "paraméterlistaː";
Blockly.Msg.PROCEDURES_CREATE_DO = "„%1” létrehozása";
Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT = "Írj erről a funkcióról...";
Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "";
Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";  // untranslated
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "név";
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "Eljárás";
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Eljárás (nem ad vissza eredményt).";
Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";  // untranslated
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "eredménye";
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Függvény eredménnyel.";
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Figyelem: Az eljárásban azonos elnevezésű paramétert adtál meg.";
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Függvénydefiníció kiemelése";
Blockly.Msg.PROCEDURES_IFRETURN_HELPURL = "http://c2.com/cgi/wiki?GuardClause";
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "Ha az érték igaz, akkor visszatér a függvény értékével.";
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Figyelem: Ez a blokk csak függvénydefiníción belül használható.";
Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "változó:";
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Bemenet hozzáadása a függvényhez.";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "paraméterek";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Bemenetek hozzáadása, eltávolítása vagy átrendezése ehhez a függvényhez.";
Blockly.Msg.REDO = "Újra";
Blockly.Msg.REMOVE_COMMENT = "Megjegyzés törlése";
Blockly.Msg.RENAME_VARIABLE = "Változó átnevezése...";
Blockly.Msg.RENAME_VARIABLE_TITLE = "Minden \"%1\" változó átnevezése erre:";
Blockly.Msg.TEXT_APPEND_APPENDTEXT = "szövegéhez fűzd hozzá";
Blockly.Msg.TEXT_APPEND_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg.TEXT_APPEND_TO = "A";
Blockly.Msg.TEXT_APPEND_TOOLTIP = "Szöveget fűz a \"%1\" változó értékéhez.";
Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";  // untranslated
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "kisbetűs";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "Címként Formázott";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "NAGYBETŰS";
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Return a copy of the text in a different case.";
Blockly.Msg.TEXT_CHARAT_FIRST = "első";
Blockly.Msg.TEXT_CHARAT_FROM_END = "hátulról";
Blockly.Msg.TEXT_CHARAT_FROM_START = "elölről";
Blockly.Msg.TEXT_CHARAT_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-text";  // untranslated
Blockly.Msg.TEXT_CHARAT_INPUT_INTEXT = "A";
Blockly.Msg.TEXT_CHARAT_LAST = "utolsó";
Blockly.Msg.TEXT_CHARAT_RANDOM = "véletlen";
Blockly.Msg.TEXT_CHARAT_TAIL = "karaktere";
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "A szöveg egy megadott karakterét adja eredményül.";
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Elem hozzáfűzése a szöveghez.";
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "fűzd össze";
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Összefűzéssel, törléssel vagy rendezéssel kapcsolato sblokkok szöveg szerkesztéséhez.";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "betűtől a hátulról számított";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "betűtől a(z)";
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "betűtől az utolsó";
Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "a";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "szövegben válaszd ki az első";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "szövegben válaszd ki a hátulról a(z)";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "szövegben válaszd ki a(z)";
Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "betűig tartó betűsort";
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "A megadott szövegrészletet adja eredményül.";
Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://github.com/google/blockly/wiki/Text#finding-text";  // untranslated
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "A(z)";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "szövegben az első előfordulásának helye";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "szövegben az utolsó előfordulásának helye";
Blockly.Msg.TEXT_INDEXOF_TAIL = "szövegnek";
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "A keresett szöveg első vagy utolsó előfordulásával tér vissza.  0 esetén a szövegrészlet nem található.";
Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";  // untranslated
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 üres";
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Igaz, ha a vizsgált szöveg hossza 0.";
Blockly.Msg.TEXT_JOIN_HELPURL = "https://github.com/google/blockly/wiki/Text#text-creation";  // untranslated
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "fűzd össze";
Blockly.Msg.TEXT_JOIN_TOOLTIP = "Tetszőleges számú szövegrészletet fűz össze egybefüggő szöveggé.";
Blockly.Msg.TEXT_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg.TEXT_LENGTH_TITLE = "%1 hossza";
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "A megadott szöveg karaktereinek számát adja eredményül (beleértve a szóközöket).";
Blockly.Msg.TEXT_PRINT_HELPURL = "https://github.com/google/blockly/wiki/Text#printing-text";  // untranslated
Blockly.Msg.TEXT_PRINT_TITLE = "Üzenet %1";
Blockly.Msg.TEXT_PRINT_TOOLTIP = "Megejelníti a megadott kaakterláncot üzenetként a képernyőn.";
Blockly.Msg.TEXT_PROMPT_HELPURL = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";  // untranslated
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Számot kér be a felhasználótól.";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Szöveget kér be a felhasználótól.";
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "Kérj be számot";
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "Kérj be szöveget";
Blockly.Msg.TEXT_TEXT_HELPURL = "https://hu.wikipedia.org/wiki/String";
Blockly.Msg.TEXT_TEXT_TOOLTIP = "Egy betű, szó vagy szöveg egy sora.";
Blockly.Msg.TEXT_TRIM_HELPURL = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";  // untranslated
Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "szóközök levágása mindkét végéről";
Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "szóközök levágása az elejéről";
Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "szóközök levágása a végéről";
Blockly.Msg.TEXT_TRIM_TOOLTIP = "Levágja a megadott szöveg végeiről a szóközöket.";
Blockly.Msg.TODAY = "Ma";
Blockly.Msg.UNDO = "Visszavonás";
Blockly.Msg.VARIABLES_DEFAULT_NAME = "változó";
Blockly.Msg.VARIABLES_GET_CREATE_SET = "Készíts \"%1=\"";
Blockly.Msg.VARIABLES_GET_HELPURL = "https://github.com/google/blockly/wiki/Variables#get";  // untranslated
Blockly.Msg.VARIABLES_GET_TOOLTIP = "A változó értékét adja eredményül.";
Blockly.Msg.VARIABLES_SET = "%1 %2";
Blockly.Msg.VARIABLES_SET_CREATE_GET = "Készíts \"%1\"";
Blockly.Msg.VARIABLES_SET_HELPURL = "https://github.com/google/blockly/wiki/Variables#set";  // untranslated
Blockly.Msg.VARIABLES_SET_TOOLTIP = "A változónak adhatunk értéket.";
Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;
Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_DEFRETURN_COMMENT = Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT;

// Ardublockly strings
Blockly.Msg.ARD_ANALOGREAD = "read analog pin#";  // untranslated
Blockly.Msg.ARD_ANALOGREAD_TIP = "Return value between 0 and 1024";  // untranslated
Blockly.Msg.ARD_ANALOGWRITE = "set analog pin#";  // untranslated
Blockly.Msg.ARD_ANALOGWRITE_TIP = "Write analog value between 0 and 255 to a specific PWM Port";  // untranslated
Blockly.Msg.ARD_BUILTIN_LED = "set built-in LED";  // untranslated
Blockly.Msg.ARD_BUILTIN_LED_TIP = "Light on or off for the built-in LED of the Arduino";  // untranslated
Blockly.Msg.ARD_COMPONENT_WARN1 = "A %1 configuration block with the same %2 name must be added to use this block!";  // untranslated
Blockly.Msg.ARD_DEFINE = "Define";  // untranslated
Blockly.Msg.ARD_DIGITALREAD = "read digital pin#";  // untranslated
Blockly.Msg.ARD_DIGITALREAD_TIP = "Read digital value on a pin: HIGH or LOW";  // untranslated
Blockly.Msg.ARD_DIGITALWRITE = "set digitial pin#";  // untranslated
Blockly.Msg.ARD_DIGITALWRITE_TIP = "Write digital value HIGH or LOW to a specific Port";  // untranslated
Blockly.Msg.ARD_FUN_RUN_LOOP = "Arduino loop forever:";  // untranslated
Blockly.Msg.ARD_FUN_RUN_SETUP = "Arduino run first:";  // untranslated
Blockly.Msg.ARD_FUN_RUN_TIP = "Defines the Arduino setup() and loop() functions.";  // untranslated
Blockly.Msg.ARD_HIGH = "HIGH";  // untranslated
Blockly.Msg.ARD_HIGHLOW_TIP = "Set a pin state logic High or Low.";  // untranslated
Blockly.Msg.ARD_LOW = "LOW";  // untranslated
Blockly.Msg.ARD_MAP = "Map";  // untranslated
Blockly.Msg.ARD_MAP_TIP = "Re-maps a number from [0-1024] to another.";  // untranslated
Blockly.Msg.ARD_MAP_VAL = "value to [0-";  // untranslated
Blockly.Msg.ARD_NOTONE = "Turn off tone on pin #";  // untranslated
Blockly.Msg.ARD_NOTONE_PIN = "No tone PIN#";  // untranslated
Blockly.Msg.ARD_NOTONE_PIN_TIP = "Stop generating a tone on a pin";  // untranslated
Blockly.Msg.ARD_NOTONE_TIP = "Turns the tone off on the selected pin";  // untranslated
Blockly.Msg.ARD_PIN_WARN1 = "Pin %1 is needed for %2 as pin %3. Already used as %4.";  // untranslated
Blockly.Msg.ARD_PULSETIMEOUT_TIP = "Measures the duration of a pulse on the selected pin, if it is within the time-out in microseconds.";  // untranslated
Blockly.Msg.ARD_PULSE_READ = "measure %1 pulse on pin #%2";  // untranslated
Blockly.Msg.ARD_PULSE_READ_TIMEOUT = "measure %1 pulse on pin #%2 (timeout after %3 μs)";  // untranslated
Blockly.Msg.ARD_PULSE_TIP = "Measures the duration of a pulse on the selected pin.";  // untranslated
Blockly.Msg.ARD_SERIAL_BPS = "bps";  // untranslated
Blockly.Msg.ARD_SERIAL_PRINT = "print";  // untranslated
Blockly.Msg.ARD_SERIAL_PRINT_NEWLINE = "add new line";  // untranslated
Blockly.Msg.ARD_SERIAL_PRINT_TIP = "Prints data to the console/serial port as human-readable ASCII text.";  // untranslated
Blockly.Msg.ARD_SERIAL_PRINT_WARN = "A setup block for %1 must be added to the workspace to use this block!";  // untranslated
Blockly.Msg.ARD_SERIAL_SETUP = "Setup";  // untranslated
Blockly.Msg.ARD_SERIAL_SETUP_TIP = "Selects the speed for a specific Serial peripheral";  // untranslated
Blockly.Msg.ARD_SERIAL_SPEED = ":  speed to";  // untranslated
Blockly.Msg.ARD_SERVO_READ = "read SERVO from PIN#";  // untranslated
Blockly.Msg.ARD_SERVO_READ_TIP = "Read a Servo angle";  // untranslated
Blockly.Msg.ARD_SERVO_WRITE = "set SERVO from Pin";  // untranslated
Blockly.Msg.ARD_SERVO_WRITE_DEG_180 = "Degrees (0~180)";  // untranslated
Blockly.Msg.ARD_SERVO_WRITE_TIP = "Set a Servo to an specified angle";  // untranslated
Blockly.Msg.ARD_SERVO_WRITE_TO = "to";  // untranslated
Blockly.Msg.ARD_SETTONE = "Set tone on pin #";  // untranslated
Blockly.Msg.ARD_SPI_SETUP = "Setup";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_CONF = "configuration:";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_DIVIDE = "clock divide";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_LSBFIRST = "LSBFIRST";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_MODE = "SPI mode (idle - edge)";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_MODE0 = "0 (Low - Falling)";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_MODE1 = "1 (Low - Rising)";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_MODE2 = "2 (High - Falling)";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_MODE3 = "3 (High - Rising)";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_MSBFIRST = "MSBFIRST";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_SHIFT = "data shift";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_TIP = "Configures the SPI peripheral.";  // untranslated
Blockly.Msg.ARD_SPI_TRANSRETURN_TIP = "Send a SPI message to an specified slave device and get data back.";  // untranslated
Blockly.Msg.ARD_SPI_TRANS_NONE = "none";  // untranslated
Blockly.Msg.ARD_SPI_TRANS_SLAVE = "to slave pin";  // untranslated
Blockly.Msg.ARD_SPI_TRANS_TIP = "Send a SPI message to an specified slave device.";  // untranslated
Blockly.Msg.ARD_SPI_TRANS_VAL = "transfer";  // untranslated
Blockly.Msg.ARD_SPI_TRANS_WARN1 = "A setup block for %1 must be added to the workspace to use this block!";  // untranslated
Blockly.Msg.ARD_SPI_TRANS_WARN2 = "Old pin value %1 is no longer available.";  // untranslated
Blockly.Msg.ARD_STEPPER_COMPONENT = "stepper";  // untranslated
Blockly.Msg.ARD_STEPPER_DEFAULT_NAME = "MyStepper";  // untranslated
Blockly.Msg.ARD_STEPPER_FOUR_PINS = "4";  // untranslated
Blockly.Msg.ARD_STEPPER_MOTOR = "stepper motor:";  // untranslated
Blockly.Msg.ARD_STEPPER_NUMBER_OF_PINS = "Number of pins";  // untranslated
Blockly.Msg.ARD_STEPPER_PIN1 = "pin1#";  // untranslated
Blockly.Msg.ARD_STEPPER_PIN2 = "pin2#";  // untranslated
Blockly.Msg.ARD_STEPPER_PIN3 = "pin3#";  // untranslated
Blockly.Msg.ARD_STEPPER_PIN4 = "pin4#";  // untranslated
Blockly.Msg.ARD_STEPPER_REVOLVS = "how many steps per revolution";  // untranslated
Blockly.Msg.ARD_STEPPER_SETUP = "Setup stepper motor";  // untranslated
Blockly.Msg.ARD_STEPPER_SETUP_TIP = "Configures a stepper motor pinout and other settings.";  // untranslated
Blockly.Msg.ARD_STEPPER_SPEED = "set speed (rpm) to";  // untranslated
Blockly.Msg.ARD_STEPPER_STEP = "move stepper";  // untranslated
Blockly.Msg.ARD_STEPPER_STEPS = "steps";  // untranslated
Blockly.Msg.ARD_STEPPER_STEP_TIP = "Turns the stepper motor a specific number of steps.";  // untranslated
Blockly.Msg.ARD_STEPPER_TWO_PINS = "2";  // untranslated
Blockly.Msg.ARD_TIME_DELAY = "wait";  // untranslated
Blockly.Msg.ARD_TIME_DELAY_MICROS = "microseconds";  // untranslated
Blockly.Msg.ARD_TIME_DELAY_MICRO_TIP = "Wait specific time in microseconds";  // untranslated
Blockly.Msg.ARD_TIME_DELAY_TIP = "Wait specific time in milliseconds";  // untranslated
Blockly.Msg.ARD_TIME_INF = "wait forever (end program)";  // untranslated
Blockly.Msg.ARD_TIME_INF_TIP = "Wait indefinitely, stopping the program.";  // untranslated
Blockly.Msg.ARD_TIME_MICROS = "current elapsed Time (microseconds)";  // untranslated
Blockly.Msg.ARD_TIME_MICROS_TIP = "Returns the number of microseconds since the Arduino board began running the current program. Has to be stored in a positive long integer";  // untranslated
Blockly.Msg.ARD_TIME_MILLIS = "current elapsed Time (milliseconds)";  // untranslated
Blockly.Msg.ARD_TIME_MILLIS_TIP = "Returns the number of milliseconds since the Arduino board began running the current program. Has to be stored in a positive long integer";  // untranslated
Blockly.Msg.ARD_TIME_MS = "milliseconds";  // untranslated
Blockly.Msg.ARD_TONEFREQ = "at frequency";  // untranslated
Blockly.Msg.ARD_TONE_FREQ = "frequency";  // untranslated
Blockly.Msg.ARD_TONE_PIN = "Tone PIN#";  // untranslated
Blockly.Msg.ARD_TONE_PIN_TIP = "Generate audio tones on a pin";  // untranslated
Blockly.Msg.ARD_TONE_TIP = "Sets tone on pin to specified frequency within range 31 - 65535";  // untranslated
Blockly.Msg.ARD_TONE_WARNING = "Frequency must be in range 31 - 65535";  // untranslated
Blockly.Msg.ARD_TYPE_ARRAY = "Array";  // untranslated
Blockly.Msg.ARD_TYPE_BOOL = "Boolean";  // untranslated
Blockly.Msg.ARD_TYPE_CHAR = "Character";  // untranslated
Blockly.Msg.ARD_TYPE_CHILDBLOCKMISSING = "ChildBlockMissing";  // untranslated
Blockly.Msg.ARD_TYPE_DECIMAL = "Decimal";  // untranslated
Blockly.Msg.ARD_TYPE_LONG = "Large Number";  // untranslated
Blockly.Msg.ARD_TYPE_NULL = "Null";  // untranslated
Blockly.Msg.ARD_TYPE_NUMBER = "Number";  // untranslated
Blockly.Msg.ARD_TYPE_SHORT = "Short Number";  // untranslated
Blockly.Msg.ARD_TYPE_TEXT = "Text";  // untranslated
Blockly.Msg.ARD_TYPE_UNDEF = "Undefined";  // untranslated
Blockly.Msg.ARD_VAR_AS = "as";  // untranslated
Blockly.Msg.ARD_VAR_AS_TIP = "Sets a value to a specific type";  // untranslated
Blockly.Msg.ARD_WRITE_TO = "to";  // untranslated
Blockly.Msg.NEW_INSTANCE = "New instance...";  // untranslated
Blockly.Msg.NEW_INSTANCE_TITLE = "New instance name:";  // untranslated
Blockly.Msg.RENAME_INSTANCE = "Rename instance...";  // untranslated
Blockly.Msg.RENAME_INSTANCE_TITLE = "Rename all '%1' instances to:";  // untranslated
Blockly.Msg.cases_add = "Fall";  // untranslated
Blockly.Msg.cases_condition = "Fall (Variable) = ";  // untranslated
Blockly.Msg.cases_do = "Führe aus";  // untranslated
Blockly.Msg.cases_switch = "Variable";  // untranslated
Blockly.Msg.mcubase_SD_COMPONENT = "SD-Block";  // untranslated
Blockly.Msg.mcubase_basic_blue = "Blau";  // untranslated
Blockly.Msg.mcubase_basic_green = "Grün";  // untranslated
Blockly.Msg.mcubase_basic_red = "Rot";  // untranslated
Blockly.Msg.mcubase_basic_state = "Status";  // untranslated
Blockly.Msg.mcubase_bmx055_accelerometer = "Beschleunigungs Sensor";  // untranslated
Blockly.Msg.mcubase_bmx055_accelerometer_tip = "Lage Sensor";  // untranslated
Blockly.Msg.mcubase_bmx055_compass = "Lage Sensor";  // untranslated
Blockly.Msg.mcubase_bmx055_compass_tip = "Lage Sensor";  // untranslated
Blockly.Msg.mcubase_bmx055_gyroscope = "Lage Sensor";  // untranslated
Blockly.Msg.mcubase_bmx055_gyroscope_tip = "Lage Sensor";  // untranslated
Blockly.Msg.mcubase_bmx055_x = "X-Richtung";  // untranslated
Blockly.Msg.mcubase_bmx055_y = "Y-Richtung";  // untranslated
Blockly.Msg.mcubase_button = "Drucktaster";  // untranslated
Blockly.Msg.mcubase_button_tip = "Drucktaster";  // untranslated
Blockly.Msg.mcubase_display_beginDisplay = "Display initialisieren";  // untranslated
Blockly.Msg.mcubase_display_black = "Schwarz";  // untranslated
Blockly.Msg.mcubase_display_clearDisplay = "Display löschen";  // untranslated
Blockly.Msg.mcubase_display_clearDisplay_tip = "Löscht den Inhalt des Displays";  // untranslated
Blockly.Msg.mcubase_display_color = "Schriftfarbe";  // untranslated
Blockly.Msg.mcubase_display_plotDisplay = "Diagram zeichnen";  // untranslated
Blockly.Msg.mcubase_display_plotTimeFrame = "Zeitabschnitt";  // untranslated
Blockly.Msg.mcubase_display_plotXLabel = "X-Achsen Beschriftung";  // untranslated
Blockly.Msg.mcubase_display_plotXRange1 = "X-Wertebereich Anfang";  // untranslated
Blockly.Msg.mcubase_display_plotXRange2 = "X-Wertebereich Ende";  // untranslated
Blockly.Msg.mcubase_display_plotXTick = "X-Linienabstand";  // untranslated
Blockly.Msg.mcubase_display_plotYLabel = "Y-Achsen Beschriftung";  // untranslated
Blockly.Msg.mcubase_display_plotYRange1 = "Y-Wertebereich Anfang";  // untranslated
Blockly.Msg.mcubase_display_plotYRange2 = "Y-Wertebereich Ende";  // untranslated
Blockly.Msg.mcubase_display_plotYTick = "Y-Linienabstand";  // untranslated
Blockly.Msg.mcubase_display_printDisplay = "";  // untranslated
Blockly.Msg.mcubase_display_printDisplay_tip = "zeigt Wert auf dem Display an.";  // untranslated
Blockly.Msg.mcubase_display_printDisplay_value = "Wert";  // untranslated
Blockly.Msg.mcubase_display_printDisplay_x = "x";  // untranslated
Blockly.Msg.mcubase_display_printDisplay_y = "y";  // untranslated
Blockly.Msg.mcubase_display_setSize = "Schriftgröße";  // untranslated
Blockly.Msg.mcubase_display_setSize_tip = "Ändere die Schriftgröße auf einen Wert zwischen 1 und 10.";  // untranslated
Blockly.Msg.mcubase_display_show = "Zeige auf dem Display";  // untranslated
Blockly.Msg.mcubase_display_show_tip = "Zeigt den Nachfolgenden Inhalt auf dem Bildschirm";  // untranslated
Blockly.Msg.mcubase_display_white = "Weiß";  // untranslated
Blockly.Msg.mcubase_foto = "Fotowiderstand";  // untranslated
Blockly.Msg.mcubase_foto_tip = "Fotowiderstand";  // untranslated
Blockly.Msg.mcubase_gps_alt = "Höhe über NN in m";  // untranslated
Blockly.Msg.mcubase_gps_getValues = "GPS Modul";  // untranslated
Blockly.Msg.mcubase_gps_getValues_tip = "ruft das GPS Signal ab";  // untranslated
Blockly.Msg.mcubase_gps_lat = "Breitengrad";  // untranslated
Blockly.Msg.mcubase_gps_lng = "Längengrad";  // untranslated
Blockly.Msg.mcubase_gps_speed = "Geschwindigkeit in km/h";  // untranslated
Blockly.Msg.mcubase_hum = "Luftfeuchtigkeit in %";  // untranslated
Blockly.Msg.mcubase_hum_tip = "Luftfeuchtigkeit";  // untranslated
Blockly.Msg.mcubase_interval = "ms";  // untranslated
Blockly.Msg.mcubase_interval_timer = "Messintervall";  // untranslated
Blockly.Msg.mcubase_interval_timer_tip = "Intervall";  // untranslated
Blockly.Msg.mcubase_ir = "Infrarot Abstandssensor";  // untranslated
Blockly.Msg.mcubase_ir_tip = "Infrarot Abstandssensor";  // untranslated
Blockly.Msg.mcubase_led = "LED an digital";  // untranslated
Blockly.Msg.mcubase_led_tip = "Einfache LED. Beim Anschluss sollte immer ein Vorwiderstand verwendet werden";  // untranslated
Blockly.Msg.mcubase_light = "Beleuchtungsstärke in Lux";  // untranslated
Blockly.Msg.mcubase_lux = "Helligkeitssensor";  // untranslated
Blockly.Msg.mcubase_lux_tip = "Helligkeitssensor";  // untranslated
Blockly.Msg.mcubase_off = "Aus";  // untranslated
Blockly.Msg.mcubase_on = "Ein";  // untranslated
Blockly.Msg.mcubase_osem_connection = "Verbinde mit openSenseMap";  // untranslated
Blockly.Msg.mcubase_osem_connection_tip = "stellt eine WLAN verbindung her";  // untranslated
Blockly.Msg.mcubase_output_filename = "Daten";  // untranslated
Blockly.Msg.mcubase_output_format = "Format:";  // untranslated
Blockly.Msg.mcubase_output_linebreak = "Zeilenumbruch";  // untranslated
Blockly.Msg.mcubase_output_networkid = "NetzwerkID";  // untranslated
Blockly.Msg.mcubase_output_password = "Passwort";  // untranslated
Blockly.Msg.mcubase_output_safetosd = "Auf SD Karte speichern";  // untranslated
Blockly.Msg.mcubase_output_safetosd_tip = "Speichert Messwerte auf SD Karte";  // untranslated
Blockly.Msg.mcubase_output_serialprint = "Auf Kommandozeile ausgeben";  // untranslated
Blockly.Msg.mcubase_output_timestamp = "Zeitstempel";  // untranslated
Blockly.Msg.mcubase_piezo = "Piezo an digital";  // untranslated
Blockly.Msg.mcubase_piezo_tip = "Piezo an digital PIN. Beim Anschluss sollte immer ein Vorwiderstand verwendet werden";  // untranslated
Blockly.Msg.mcubase_poti = "Potenziometer";  // untranslated
Blockly.Msg.mcubase_poti_tip = "Potenziometer";  // untranslated
Blockly.Msg.mcubase_pressure = "Luftdruck in Pa";  // untranslated
Blockly.Msg.mcubase_pressure_dimension = "Luftdruck in Pa";  // untranslated
Blockly.Msg.mcubase_pressure_sensor = "Luftdruck/Temperatur Sensor (BMP280)";  // untranslated
Blockly.Msg.mcubase_pressure_tip = "Luftdrucksensor";  // untranslated
Blockly.Msg.mcubase_rgb_led = "RGB-LED";  // untranslated
Blockly.Msg.mcubase_rgb_led_tip = "RGB-LED benötigt einen digitalen Pin und eine Stromkreis ";  // untranslated
Blockly.Msg.mcubase_sd_create_file = "Erstelle Datei auf SD-Karte";  // untranslated
Blockly.Msg.mcubase_sd_filename = "Daten";  // untranslated
Blockly.Msg.mcubase_sd_open_file = "Öffne eine Datei auf der SD-Karte";  // untranslated
Blockly.Msg.mcubase_sd_write_file = " Schreibe Daten auf SD-Karte";  // untranslated
Blockly.Msg.mcubase_sds011 = "Feinstaubsensor";  // untranslated
Blockly.Msg.mcubase_sds011_dimension = "in µg/m³ an";  // untranslated
Blockly.Msg.mcubase_sds011_pm10 = "PM10";  // untranslated
Blockly.Msg.mcubase_sds011_pm25 = "PM2.5";  // untranslated
Blockly.Msg.mcubase_sds011_serial1 = "Serial1";  // untranslated
Blockly.Msg.mcubase_sds011_serial2 = "Serial2";  // untranslated
Blockly.Msg.mcubase_sds011_tip = "Misst die Feinstaubbelastung";  // untranslated
Blockly.Msg.mcubase_send_mobile_to_osem = "Sende Messwert und Standort";  // untranslated
Blockly.Msg.mcubase_send_mobile_to_osem_tip = "Sende Messwert und Standort an die openSenseMap";  // untranslated
Blockly.Msg.mcubase_send_to_osem = "sende Messwert an die openSenseMap";  // untranslated
Blockly.Msg.mcubase_send_to_osem_tip = "sende Messwert an";  // untranslated
Blockly.Msg.mcubase_sensor = "Sensoren";  // untranslated
Blockly.Msg.mcubase_serial_tip = "Gibt Messwerte oder Daten auf dem Seriellen Monitor der Arduino IDE aus. Praktisch um ohne Display zu arbeiten";  // untranslated
Blockly.Msg.mcubase_sound = "Geräuschsensor";  // untranslated
Blockly.Msg.mcubase_sound_tip = "Geräuschsensor";  // untranslated
Blockly.Msg.mcubase_temp = "Temperatur in °C";  // untranslated
Blockly.Msg.mcubase_temp_hum = "Temperatur/Luftfeuchtigkeitssensor (HDC1080)";  // untranslated
Blockly.Msg.mcubase_temp_hum_tip = "Sensor misst Temperatur und Luftfeuchtigkeit";  // untranslated
Blockly.Msg.mcubase_ultrasonic = "Ultraschall Abstandssensor an Port";  // untranslated
Blockly.Msg.mcubase_ultrasonic_port_A = "A";  // untranslated
Blockly.Msg.mcubase_ultrasonic_port_B = "B";  // untranslated
Blockly.Msg.mcubase_ultrasonic_port_C = "C";  // untranslated
Blockly.Msg.mcubase_ultrasonic_tip = "Ultraschall Abstandssensor";  // untranslated
Blockly.Msg.mcubase_uv = "UV-Intensität in µW/cm²";  // untranslated
Blockly.Msg.mcubase_uv_light = "Licht Sichtbar + UV Sensor";  // untranslated
Blockly.Msg.mcubase_uv_light_tip = "Sensor misst UV-Licht oder Die Helligkeit";  // untranslated
Blockly.Msg.mcubase_value = "Messwert:";  // untranslated
Blockly.Msg.mcubase_wifi_tip = "stellt eine WLAN verbindung her";  // untranslated
Blockly.Msg.senseBox_SD_COMPONENT = "SD-Block";  // untranslated
Blockly.Msg.senseBox_basic_blue = "Blau";  // untranslated
Blockly.Msg.senseBox_basic_green = "Grün";  // untranslated
Blockly.Msg.senseBox_basic_red = "Rot";  // untranslated
Blockly.Msg.senseBox_basic_state = "Status";  // untranslated
Blockly.Msg.senseBox_bmx055_accelerometer = "Beschleunigungs Sensor";  // untranslated
Blockly.Msg.senseBox_bmx055_accelerometer_tip = "Lage Sensor";  // untranslated
Blockly.Msg.senseBox_bmx055_compass = "Lage Sensor";  // untranslated
Blockly.Msg.senseBox_bmx055_compass_tip = "Lage Sensor";  // untranslated
Blockly.Msg.senseBox_bmx055_gyroscope = "Lage Sensor";  // untranslated
Blockly.Msg.senseBox_bmx055_gyroscope_tip = "Lage Sensor";  // untranslated
Blockly.Msg.senseBox_bmx055_x = "X-Richtung";  // untranslated
Blockly.Msg.senseBox_bmx055_y = "Y-Richtung";  // untranslated
Blockly.Msg.senseBox_button = "Drucktaster";  // untranslated
Blockly.Msg.senseBox_button_tip = "Drucktaster";  // untranslated
Blockly.Msg.senseBox_display_beginDisplay = "Display initialisieren";  // untranslated
Blockly.Msg.senseBox_display_black = "Schwarz";  // untranslated
Blockly.Msg.senseBox_display_clearDisplay = "Display löschen";  // untranslated
Blockly.Msg.senseBox_display_clearDisplay_tip = "Löscht den Inhalt des Displays";  // untranslated
Blockly.Msg.senseBox_display_color = "Schriftfarbe";  // untranslated
Blockly.Msg.senseBox_display_plotDisplay = "Diagram zeichnen";  // untranslated
Blockly.Msg.senseBox_display_plotTimeFrame = "Zeitabschnitt";  // untranslated
Blockly.Msg.senseBox_display_plotXLabel = "X-Achsen Beschriftung";  // untranslated
Blockly.Msg.senseBox_display_plotXRange1 = "X-Wertebereich Anfang";  // untranslated
Blockly.Msg.senseBox_display_plotXRange2 = "X-Wertebereich Ende";  // untranslated
Blockly.Msg.senseBox_display_plotXTick = "X-Linienabstand";  // untranslated
Blockly.Msg.senseBox_display_plotYLabel = "Y-Achsen Beschriftung";  // untranslated
Blockly.Msg.senseBox_display_plotYRange1 = "Y-Wertebereich Anfang";  // untranslated
Blockly.Msg.senseBox_display_plotYRange2 = "Y-Wertebereich Ende";  // untranslated
Blockly.Msg.senseBox_display_plotYTick = "Y-Linienabstand";  // untranslated
Blockly.Msg.senseBox_display_printDisplay = "";  // untranslated
Blockly.Msg.senseBox_display_printDisplay_tip = "zeigt Wert auf dem Display an.";  // untranslated
Blockly.Msg.senseBox_display_printDisplay_value = "Wert";  // untranslated
Blockly.Msg.senseBox_display_printDisplay_x = "x";  // untranslated
Blockly.Msg.senseBox_display_printDisplay_y = "y";  // untranslated
Blockly.Msg.senseBox_display_setSize = "Schriftgröße";  // untranslated
Blockly.Msg.senseBox_display_setSize_tip = "Ändere die Schriftgröße auf einen Wert zwischen 1 und 10.";  // untranslated
Blockly.Msg.senseBox_display_white = "Weiß";  // untranslated
Blockly.Msg.senseBox_foto = "Fotowiderstand";  // untranslated
Blockly.Msg.senseBox_foto_tip = "Fotowiderstand";  // untranslated
Blockly.Msg.senseBox_gps_alt = "Höhe über NN in m";  // untranslated
Blockly.Msg.senseBox_gps_getValues = "GPS Modul";  // untranslated
Blockly.Msg.senseBox_gps_getValues_tip = "ruft das GPS Signal ab";  // untranslated
Blockly.Msg.senseBox_gps_lat = "Breitengrad";  // untranslated
Blockly.Msg.senseBox_gps_lng = "Längengrad";  // untranslated
Blockly.Msg.senseBox_gps_speed = "Geschwindigkeit in km/h";  // untranslated
Blockly.Msg.senseBox_hum = "Luftfeuchtigkeit in %";  // untranslated
Blockly.Msg.senseBox_hum_tip = "Luftfeuchtigkeit";  // untranslated
Blockly.Msg.senseBox_interval = "ms";  // untranslated
Blockly.Msg.senseBox_interval_timer = "Messintervall";  // untranslated
Blockly.Msg.senseBox_interval_timer_tip = "Intervall";  // untranslated
Blockly.Msg.senseBox_ir = "Infrarot Abstandssensor";  // untranslated
Blockly.Msg.senseBox_ir_tip = "Infrarot Abstandssensor";  // untranslated
Blockly.Msg.senseBox_led = "LED an digital";  // untranslated
Blockly.Msg.senseBox_led_tip = "Einfache LED. Beim Anschluss sollte immer ein Vorwiderstand verwendet werden";  // untranslated
Blockly.Msg.senseBox_light = "Beleuchtungsstärke in Lux";  // untranslated
Blockly.Msg.senseBox_lux = "Helligkeitssensor";  // untranslated
Blockly.Msg.senseBox_lux_tip = "Helligkeitssensor";  // untranslated
Blockly.Msg.senseBox_off = "Aus";  // untranslated
Blockly.Msg.senseBox_on = "Ein";  // untranslated
Blockly.Msg.senseBox_osem_connection = "Verbinde mit openSenseMap";  // untranslated
Blockly.Msg.senseBox_osem_connection_tip = "stellt eine WLAN verbindung her";  // untranslated
Blockly.Msg.senseBox_output_filename = "Daten";  // untranslated
Blockly.Msg.senseBox_output_format = "Format:";  // untranslated
Blockly.Msg.senseBox_output_linebreak = "Zeilenumbruch";  // untranslated
Blockly.Msg.senseBox_output_networkid = "NetzwerkID";  // untranslated
Blockly.Msg.senseBox_output_password = "Passwort";  // untranslated
Blockly.Msg.senseBox_output_safetosd = "Auf SD Karte speichern";  // untranslated
Blockly.Msg.senseBox_output_safetosd_tip = "Speichert Messwerte auf SD Karte";  // untranslated
Blockly.Msg.senseBox_output_serialprint = "Auf Kommandozeile ausgeben";  // untranslated
Blockly.Msg.senseBox_output_timestamp = "Zeitstempel";  // untranslated
Blockly.Msg.senseBox_piezo = "Piezo an digital";  // untranslated
Blockly.Msg.senseBox_piezo_tip = "Piezo an digital PIN. Beim Anschluss sollte immer ein Vorwiderstand verwendet werden";  // untranslated
Blockly.Msg.senseBox_poti = "Potenziometer";  // untranslated
Blockly.Msg.senseBox_poti_tip = "Potenziometer";  // untranslated
Blockly.Msg.senseBox_pressure = "Luftdruck in Pa";  // untranslated
Blockly.Msg.senseBox_pressure_dimension = "Luftdruck in Pa";  // untranslated
Blockly.Msg.senseBox_pressure_sensor = "Luftdruck/Temperatur Sensor (BMP280)";  // untranslated
Blockly.Msg.senseBox_pressure_tip = "Luftdrucksensor";  // untranslated
Blockly.Msg.senseBox_rgb_led = "RGB-LED";  // untranslated
Blockly.Msg.senseBox_rgb_led_tip = "RGB-LED benötigt einen digitalen Pin und eine Stromkreis ";  // untranslated
Blockly.Msg.senseBox_sd_create_file = "Erstelle Datei auf SD-Karte";  // untranslated
Blockly.Msg.senseBox_sd_open_file = "Öffne eine Datei auf der SD-Karte";  // untranslated
Blockly.Msg.senseBox_sd_write_file = " Schreibe Daten auf SD-Karte";  // untranslated
Blockly.Msg.senseBox_sds011 = "Feinstaubsensor";  // untranslated
Blockly.Msg.senseBox_sds011_dimension = "in µg/m³ an";  // untranslated
Blockly.Msg.senseBox_sds011_pm10 = "PM10";  // untranslated
Blockly.Msg.senseBox_sds011_pm25 = "PM2.5";  // untranslated
Blockly.Msg.senseBox_sds011_serial1 = "Serial1";  // untranslated
Blockly.Msg.senseBox_sds011_serial2 = "Serial2";  // untranslated
Blockly.Msg.senseBox_sds011_tip = "Misst die Feinstaubbelastung";  // untranslated
Blockly.Msg.senseBox_send_mobile_to_osem = "Sende Messwert und Standort";  // untranslated
Blockly.Msg.senseBox_send_mobile_to_osem_tip = "Sende Messwert und Standort an die openSenseMap";  // untranslated
Blockly.Msg.senseBox_send_to_osem = "sende Messwert an die openSenseMap";  // untranslated
Blockly.Msg.senseBox_send_to_osem_tip = "sende Messwert an";  // untranslated
Blockly.Msg.senseBox_sensor = "Sensoren";  // untranslated
Blockly.Msg.senseBox_serial_tip = "Gibt Messwerte oder Daten auf dem Seriellen Monitor der Arduino IDE aus. Praktisch um ohne Display zu arbeiten";  // untranslated
Blockly.Msg.senseBox_sound = "Geräuschsensor";  // untranslated
Blockly.Msg.senseBox_sound_tip = "Geräuschsensor";  // untranslated
Blockly.Msg.senseBox_temp = "Temperatur in °C";  // untranslated
Blockly.Msg.senseBox_temp_hum = "Temperatur/Luftfeuchtigkeitssensor (HDC1080)";  // untranslated
Blockly.Msg.senseBox_temp_hum_tip = "Sensor misst Temperatur und Luftfeuchtigkeit";  // untranslated
Blockly.Msg.senseBox_ultrasonic = "Ultraschall Abstandssensor an Port";  // untranslated
Blockly.Msg.senseBox_ultrasonic_port_A = "A";  // untranslated
Blockly.Msg.senseBox_ultrasonic_port_B = "B";  // untranslated
Blockly.Msg.senseBox_ultrasonic_port_C = "C";  // untranslated
Blockly.Msg.senseBox_ultrasonic_tip = "Ultraschall Abstandssensor";  // untranslated
Blockly.Msg.senseBox_uv = "UV-Intensität in µW/cm²";  // untranslated
Blockly.Msg.senseBox_uv_light = "Licht Sichtbar + UV Sensor";  // untranslated
Blockly.Msg.senseBox_uv_light_tip = "Sensor misst UV-Licht oder Die Helligkeit";  // untranslated
Blockly.Msg.senseBox_value = "Messwert:";  // untranslated
Blockly.Msg.senseBox_wifi_tip = "stellt eine WLAN verbindung her";  // untranslated
Blockly.Msg.sensebox_display_show = "Zeige auf dem Display";  // untranslated
Blockly.Msg.sensebox_display_show_tip = "Zeigt den Nachfolgenden Inhalt auf dem Bildschirm";  // untranslated
Blockly.Msg.sensebox_sd_filename = "Daten";  // untranslated
